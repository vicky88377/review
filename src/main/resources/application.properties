## ===============================
## = JPA / HIBERNATE
## ===============================
#
## Use spring.jpa.properties.* for Hibernate native properties (the prefix is
## stripped before adding them to the entity manager).
#
## Show or not log for each sql query
#spring.jpa.show-sql = true
#
## Hibernate ddl auto (create, create-drop, update): with "update" the database
## schema will be automatically updated accordingly to java entities found in
## the project
#spring.jpa.hibernate.ddl-auto = update
#
## Naming strategy
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
#
## Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
#
#spring.datasource.driverclassName=com.mysql.jdbc.Driver

# ===============================
# = H2 data base config
# ===============================
### Naming strategy for databse columns names change if required accordingly
#spring.jpa.hibernate.naming-strategy:org.hibernate.cfg.DefaultNamingStrategy
#spring.datasource.schema=classpath:schema.sql
#spring.datasource.data=classpath:data.sql
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2_console
#spring.datasource.url=jdbc:h2:~/data/db
#spring.datasource.username=sa
#spring.datasource.password=sa
#spring.datasource.driverClassName=org.h2.Driver
#spring.jpa.hibernate.ddl-auto =update
#spring.jpa.show-sql=true 
#
##server.port=8080
#server.port=9001
##for docker

## doesn't work
#spring.datasource.schema=schema.sql
#spring.jpa.properties.hibernate.default_schema=schema.sql
#spring.jpa.hibernate.ddl-auto=validate

# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
spring.datasource.url = jdbc:mysql://localhost:3306/customers?useSSL=false
server.port=9001
# Username and password
spring.datasource.username = root
spring.datasource.password = j2ee

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

<!-- kripakar -->

spring.datasource.dataSourceClassName=com.mysql.jdbc.jdbc2.optional.MysqlDataSource
spring.datasource.type= com.zaxxer.hikari.HikariDataSource
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.hikari.jdbcUrl = jdbc:mysql://localhost:3306/customers?useSSL=false
spring.jpa.hibernate.connection.provider_class=org.hibernate.hikaricp.internal.HikariCPConnectionProvider

spring.jpa.database=MYSQL
spring.jpa.hibernate.hikari.minimumIdle=20
spring.jpa.hibernate.hikari.maximumPoolSize=30
spring.jpa.hibernate.hikari.idleTimeout=30000
 
spring.jpa.hibernate.naming_strategy=org.hibernate.cfg.EJB3NamingStrategy
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.hibernate.ddl-auto = update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect
spring.jpa.properties.hibernate.cache.use_query_cache=false
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.default_cache_concurrency_strategy=READ_WRITE
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
